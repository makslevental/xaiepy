name: Tests

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    types: [assigned, opened, synchronize, reopened]

#concurrency:
#  group: test-${{ github.event.number || github.sha }}
#  cancel-in-progress: true

jobs:

  test-x86:

    runs-on: ${{ matrix.OS }}
    strategy:
      fail-fast: false
      matrix:
        OS: [ ubuntu-20.04, windows-2019 ]
        PY_VERSION: [ "3.8", "3.9", "3.10", "3.11", "3.12" ]

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout actions
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Get recursive submodules
        run: |
          
          git submodule update --init --recursive

      - uses: ./.github/workflows/base
        id: base
        with:
          OS: ${{ matrix.OS }}
          ARCH: ${{ matrix.ARCH }}

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.PY_VERSION }}

      - name: Build and install protoc
        if: contains(matrix.OS, 'windows') || contains(matrix.OS, 'ubuntu')
        run: |
          
          if [ ${{ matrix.OS }} == 'windows-2019' ]; then
            choco install -y pkgconfiglite protoc 
          else
            sudo apt install -y libdrm-dev ocl-icd-opencl-dev rapidjson-dev libprotobuf-dev systemtap-sdt-dev uuid-dev python3-dev
          fi

      - name: build wheel
        env:
          BOOST_ROOT: ${{ steps.base.outputs.BOOST_ROOT }}
          BOOST_VERSION: 1.73.0
        run: |
          
          REPO_SRC_DIR=$PWD bash util/apply_patches.sh
          pip install -r requirements-dev.txt
          pip wheel . -v -w wheelhouse --no-build-isolation

      - name: test
        run: |
          
          pushd wheelhouse
          pip install xaiepy -f $PWD
          if [ ${{ matrix.OS }} == 'windows-2019' ]; then
            pytest -s ../tests
          else
            pytest --capture=tee-sys ../tests
          fi
          popd

      - name: Test mwe
        shell: bash
        run: |
          
          export LD_LIBRARY_PATH=/opt/xilinx/xrt/lib
          pushd examples
          python cdo.py
          popd

  test-linux-aarch64:

    runs-on: ${{ matrix.OS }}
    strategy:
      fail-fast: false
      matrix:
        OS: [ ubuntu-20.04 ]
        PY_VERSION: [ "3.8", "3.9", "3.10", "3.11", "3.12" ]

    steps:
      - name: Checkout actions
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Get recursive submodules
        run: |
          
          git submodule update --init --recursive

      - name: Setup Cpp
        uses: aminya/setup-cpp@v1
        with:
          compiler: gcc
          cmake: true
          ninja: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: aarch64

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.PY_VERSION }}

      - uses: ./.github/workflows/base
        id: base
        with:
          OS: ${{ matrix.OS }}
          ARCH: ${{ matrix.ARCH }}

      - name: Install XRT deps
        run: |
          
          sudo apt install -y libdrm-dev ocl-icd-opencl-dev rapidjson-dev libprotobuf-dev systemtap-sdt-dev uuid-dev python3-dev

      - name: build wheel
        env:
          BOOST_ROOT: ${{ steps.base.outputs.BOOST_ROOT }}
          BOOST_VERSION: 1.73.0
        run: |
          
          REPO_SRC_DIR=$PWD bash util/apply_patches.sh
          pip install -r requirements-dev.txt
          pip wheel . -v -w wheelhouse --no-build-isolation

      - name: test
        run: |
          
          pushd wheelhouse
          pip install xaiepy -f $PWD
          pytest -s ../tests/*.py
          popd

      - name: Test mwe
        shell: bash
        run: |
          
          export LD_LIBRARY_PATH=/opt/xilinx/xrt/lib
          pushd examples
          python cdo.py
          popd
